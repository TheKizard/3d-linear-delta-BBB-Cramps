# #######################################
#
#
# HAL file for Delta BeagleBone + CRAMPS cape with 4 steppers
#
# Derived from CRAMPS.hal
#
# ########################################

# Launch the setup script to make sure hardware setup looks good

loadusr -w ./setup.sh

# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics

loadrt lineardeltakins

# settings for delta printer

setp lineardeltakins.L [MACHINE]CF_ROD
setp lineardeltakins.R [MACHINE]DELTA_R

# motion controller, get name and thread periods from ini file

loadrt tp
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES tp=tp kins=lineardeltakins


# load low-level drivers
loadrt hal_bb_gpio output_pins=816,822,823,824,825,826,914,923,925 input_pins=807,808,809,810,817,911,913
loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG) halname=hpg
loadrt pid count=2
loadrt limit1 count=2


# Python user-mode HAL module to read ADC value and generate a thermostat output for PWM
# c = analog input channel and thermistor table
loadusr -Wn Therm hal_temp_bbb -n Therm -c 04:epcos_B57560G1104,05:epcos_B57560G1104 -b CRAMPS

# other components
#loadrt pid names=e0-temp,pid.hbp-temp
#loadrt limit1 names=limit1.e0-heater,limit1.hbp-heater
loadrt scale names=scale.f0,scale.f1,scale.e0-fan-comp
#loadrt thermistor_check names=thermistor-check.e0,thermistor-check.hbp
loadrt wcomp names=wcomp.e0-temp-range,wcomp.hbp-temp-range,wcomp.e0-temp-limit,wcomp.hbp-temp-limit
loadrt sum2 names=sum2.e0-temp-range-neg,sum2.e0-temp-range-pos,sum2.hbp-temp-range-neg,sum2.hbp-temp-range-pos
loadrt mux2 names=mux2.exp0-pwm
loadrt comp names=comp.exp0-temp,comp.hbp-hot,comp.e0-active,comp.hbp-active


# ################################################
# THREADS
# ################################################

addf hpg.capture-position	servo-thread
addf bb_gpio.read		servo-thread
addf motion-command-handler	servo-thread
addf motion-controller		servo-thread
addf pid.0.do-pid-calcs		servo-thread
addf pid.1.do-pid-calcs		servo-thread
addf limit1.0			servo-thread
addf limit1.1			servo-thread
addf hpg.update			servo-thread
addf bb_gpio.write		servo-thread

#-----------------------------------------------------
addf   wcomp.hbp-temp-range	servo-thread
addf   wcomp.hbp-temp-limit	servo-thread
addf   comp.hbp-active		servo-thread
addf   wcomp.e0-temp-range	servo-thread
addf   wcomp.e0-temp-limit	servo-thread
addf   comp.e0-active		servo-thread

# F0
addf   scale.f0			servo-thread

# F1
addf   scale.f1			servo-thread

addf   comp.hbp-hot		servo-thread




# ###################################
# UI remote component definition
# ###################################
sete 1 0.1

newcomp fdm-e0 timer=100
newpin  fdm-e0 fdm-e0.temp.meas      float in eps=1
newpin  fdm-e0 fdm-e0.temp.set       float io
newpin  fdm-e0 fdm-e0.temp.standby   float in
newpin  fdm-e0 fdm-e0.temp.limit.min float in
newpin  fdm-e0 fdm-e0.temp.limit.max float in
newpin  fdm-e0 fdm-e0.temp.in-range  bit   in
newpin  fdm-e0 fdm-e0.error          bit   in
newpin  fdm-e0 fdm-e0.active         bit   in
ready   fdm-e0

newcomp fdm-e0-pid timer=100
newpin fdm-e0-pid fdm-e0-pid.Pgain              float io
newpin fdm-e0-pid fdm-e0-pid.Igain              float io
newpin fdm-e0-pid fdm-e0-pid.Dgain              float io
newpin fdm-e0-pid fdm-e0-pid.maxerrorI          float io
newpin fdm-e0-pid fdm-e0-pid.bias               float io
newpin fdm-e0-pid fdm-e0-pid.max                float in
newpin fdm-e0-pid fdm-e0-pid.min                float in
newpin fdm-e0-pid fdm-e0-pid.command            float io
newpin fdm-e0-pid fdm-e0-pid.feedback           float in
newpin fdm-e0-pid fdm-e0-pid.output             float in
ready  fdm-e0-pid

newcomp fdm-hbp timer=100
newpin  fdm-hbp fdm-hbp.temp.meas      float in eps=1
newpin  fdm-hbp fdm-hbp.temp.set       float io
newpin  fdm-hbp fdm-hbp.temp.standby   float in
newpin  fdm-hbp fdm-hbp.temp.limit.min float in
newpin  fdm-hbp fdm-hbp.temp.limit.max float in
newpin  fdm-hbp fdm-hbp.temp.in-range  bit   in
newpin  fdm-hbp fdm-hbp.error          bit   in
newpin  fdm-hbp fdm-hbp.active         bit   in
ready   fdm-hbp


newcomp fdm-f0 timer=100
newpin fdm-f0 fdm-f0.set float io
ready fdm-f0

newcomp fdm-f1 timer=100
newpin fdm-f1 fdm-f1.set float io
ready fdm-f1

newcomp fdm-f2 timer=100
newpin fdm-f2 fdm-f2.set float io
ready fdm-f2

newcomp fdm-f3 timer=100
newpin fdm-f3 fdm-f3.set float io
ready fdm-f3

newcomp fdm-l0 timer=100
newpin fdm-l0 fdm-l0.r float io
newpin fdm-l0 fdm-l0.g float io
newpin fdm-l0 fdm-l0.b float io
newpin fdm-l0 fdm-l0.w float io
ready  fdm-l0









# ######################################################

# Axis-of-motion Specific Configs (not the GUI)

# ######################################################




# ################

# X [0] Axis = column C

# ################



# axis enable chain

newsig emcmot.00.enable bit

sets emcmot.00.enable FALSE



net emcmot.00.enable <= axis.0.amp-enable-out

net emcmot.00.enable => hpg.stepgen.00.enable




# position command and feedback

net emcmot.00.pos-cmd <= axis.0.motor-pos-cmd

net emcmot.00.pos-cmd => hpg.stepgen.00.position-cmd

net motor.00.pos-fb <= hpg.stepgen.00.position-fb

net motor.00.pos-fb => axis.0.motor-pos-fb




# timing parameters

setp hpg.stepgen.00.dirsetup		[AXIS_0]DIRSETUP

setp hpg.stepgen.00.dirhold		[AXIS_0]DIRHOLD



setp hpg.stepgen.00.steplen		[AXIS_0]STEPLEN

setp hpg.stepgen.00.stepspace		[AXIS_0]STEPSPACE



setp hpg.stepgen.00.position-scale	[AXIS_0]SCALE



setp hpg.stepgen.00.maxvel		[AXIS_0]STEPGEN_MAX_VEL

setp hpg.stepgen.00.maxaccel		[AXIS_0]STEPGEN_MAX_ACC



#setp hpg.stepgen.00.step_type		0

# P8.43 PRU1.out2

setp hpg.stepgen.00.steppin		813

# P8.44 PRU1.out4

setp hpg.stepgen.00.dirpin		812




# ################

# Y [1] Axis = column A

# ################



# axis enable chain

newsig emcmot.01.enable bit

sets emcmot.01.enable FALSE



net emcmot.01.enable <= axis.1.amp-enable-out

net emcmot.01.enable => hpg.stepgen.01.enable




# position command and feedback

net emcmot.01.pos-cmd <= axis.1.motor-pos-cmd
net emcmot.01.pos-cmd => hpg.stepgen.01.position-cmd



net motor.01.pos-fb <= hpg.stepgen.01.position-fb

net motor.01.pos-fb => axis.1.motor-pos-fb




# timing parameters

setp hpg.stepgen.01.dirsetup		[AXIS_1]DIRSETUP

setp hpg.stepgen.01.dirhold		[AXIS_1]DIRHOLD



setp hpg.stepgen.01.steplen		[AXIS_1]STEPLEN

setp hpg.stepgen.01.stepspace		[AXIS_1]STEPSPACE



setp hpg.stepgen.01.position-scale	[AXIS_1]SCALE



setp hpg.stepgen.01.maxvel		[AXIS_1]STEPGEN_MAX_VEL

setp hpg.stepgen.01.maxaccel		[AXIS_1]STEPGEN_MAX_ACC



#setp hpg.stepgen.01.step_type		0

# P8.42 PRU1.out5

setp hpg.stepgen.01.steppin		815

# P8.39 PRU1.out6

setp hpg.stepgen.01.dirpin		814




# ################

# Z [2] Axis = column B

# ################



# axis enable chain

newsig emcmot.02.enable bit

sets emcmot.02.enable FALSE



net emcmot.02.enable <= axis.2.amp-enable-out

net emcmot.02.enable => hpg.stepgen.02.enable




# position command and feedback

net emcmot.02.pos-cmd <= axis.2.motor-pos-cmd

net emcmot.02.pos-cmd => hpg.stepgen.02.position-cmd



net motor.02.pos-fb <= hpg.stepgen.02.position-fb

net motor.02.pos-fb => axis.2.motor-pos-fb




# timing parameters

setp hpg.stepgen.02.dirsetup		[AXIS_2]DIRSETUP

setp hpg.stepgen.02.dirhold		[AXIS_2]DIRHOLD



setp hpg.stepgen.02.steplen		[AXIS_2]STEPLEN

setp hpg.stepgen.02.stepspace		[AXIS_2]STEPSPACE



setp hpg.stepgen.02.position-scale	[AXIS_2]SCALE



setp hpg.stepgen.02.maxvel		[AXIS_2]STEPGEN_MAX_VEL

setp hpg.stepgen.02.maxaccel		[AXIS_2]STEPGEN_MAX_ACC



#setp hpg.stepgen.02.step_type		0

# P8.27 PRU1.out8

setp hpg.stepgen.02.steppin		819

# P8.29 PRU1.out9

setp hpg.stepgen.02.dirpin		818




# ################

# A [3] Axis (Extruder)

# ################



# axis enable chain

newsig emcmot.03.enable bit

sets emcmot.03.enable FALSE



net emcmot.03.enable <= axis.3.amp-enable-out

net emcmot.03.enable => hpg.stepgen.03.enable




# position command and feedback

net emcmot.03.pos-cmd <= axis.3.motor-pos-cmd

net emcmot.03.pos-cmd => hpg.stepgen.03.position-cmd



net motor.03.pos-fb <= hpg.stepgen.03.position-fb

net motor.03.pos-fb => axis.3.motor-pos-fb




# timing parameters

setp hpg.stepgen.03.dirsetup		[AXIS_3]DIRSETUP

setp hpg.stepgen.03.dirhold		[AXIS_3]DIRHOLD



setp hpg.stepgen.03.steplen		[AXIS_3]STEPLEN

setp hpg.stepgen.03.stepspace		[AXIS_3]STEPSPACE



setp hpg.stepgen.03.position-scale	[AXIS_3]SCALE



setp hpg.stepgen.03.maxvel		[AXIS_3]STEPGEN_MAX_VEL

setp hpg.stepgen.03.maxaccel		[AXIS_3]STEPGEN_MAX_ACC



#setp hpg.stepgen.03.step_type		0

# P8.30 GPIO2.25

setp hpg.stepgen.03.steppin		916

# P8.21 GPIO1.30

setp hpg.stepgen.03.dirpin		912




# ##################################################

# Standard I/O - EStop, Enables, Limit Switches, Etc

# ##################################################



# Create estop signal chain

# Drive software estop to hardware

net estop-out iocontrol.0.user-enable-out => bb_gpio.p8.out-26

setp bb_gpio.p8.out-26.invert 1



# Monitor estop input from hardware

net estop-loop bb_gpio.p8.in-17 => iocontrol.0.emc-enable-in

setp bb_gpio.p8.in-17.invert 1



# create signals for tool loading loopback

net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared

net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed



# Axis enable signal (active low)

net emcmot.00.enable => bb_gpio.p9.out-14

setp bb_gpio.p9.out-14.invert 1



# Machine power

# Use halui.machine.is-on instead?

net emcmot.00.enable => bb_gpio.p9.out-23



# Tie machine power signal to the CRAMPS LED

# Feel free to tie any other signal you like to the LED

net emcmot.00.enable => bb_gpio.p9.out-25



# ################

# Limit Switches

# ################

newsig limit-x-min bit

newsig limit-x-max bit

newsig limit-y-min bit

newsig limit-y-max bit

newsig limit-z-min bit

newsig limit-z-max bit



net limit-x-min <= bb_gpio.p8.in-08

net limit-x-max <= bb_gpio.p8.in-07

net limit-y-min <= bb_gpio.p8.in-10

net limit-y-max <= bb_gpio.p8.in-09

net limit-z-min <= bb_gpio.p9.in-13

net limit-z-max <= bb_gpio.p9.in-11



# Adjust as needed for your switch polarity

setp bb_gpio.p8.in-08.invert 1

setp bb_gpio.p8.in-07.invert 1

setp bb_gpio.p8.in-10.invert 1

setp bb_gpio.p8.in-09.invert 1

setp bb_gpio.p9.in-11.invert 1

setp bb_gpio.p9.in-13.invert 1



# Uncomment if you actually have limit switches setup

# You probably want to setup homing in the INI file, as well

net limit-x-max => axis.0.home-sw-in
#net limit-x-min => axis.0.neg-lim-sw-in
#net limit-x-max => axis.0.pos-lim-sw-in
net limit-y-max => axis.1.home-sw-in
#net limit-y-min => axis.1.neg-lim-sw-in
#net limit-y-max => axis.1.pos-lim-sw-in
net limit-z-max => axis.2.home-sw-in
#net limit-z-min => axis.2.neg-lim-sw-in
#net limit-z-max => axis.2.pos-lim-sw-in

# ################
# Servo signals
# ################

# There is currently no driver to generate pulses for actual
# radio-control style servos, but the buffered 5V output
# signals can be used as GPIO

# !!! WARNING !!!
# BBB on-board eMMC *MUST* be disabled in order to use these!
# Drive eMMC-disabled signal high to enable signals that overlap
# with the eMMC pins on P8, otherwise they are tri-stated
#
# You also need to edit the setup.sh file to enable the GPIO pins

# Signal the hardware that eMMC has been disabled and it is safe
# to drive the signals connected to eMMC lines (active low)

newsig eMMC-disabled bit
sets eMMC-disabled 0
net eMMC-disabled bb_gpio.p8.out-16
setp bb_gpio.p8.out-16.invert 1

# Servo signals, output only, driven by an 'ACT125

newsig servo.1 bit
newsig servo.2 bit
newsig servo.3 bit
newsig servo.4 bit

sets servo.1 0
sets servo.2 0
sets servo.3 0
sets servo.4 0

net servo.1 bb_gpio.p8.out-25
net servo.2 bb_gpio.p8.out-24
net servo.3 bb_gpio.p8.out-23
net servo.4 bb_gpio.p8.out-22


# ##################################################
# EXTRUDER PWM and Temperature Signals
# ##################################################

# Define signals to use elsewhere (ie: M1xx codes)
# If you change any names here, lots of things will break!

newsig e0.temp.set		float
newsig e0.temp.meas		float
newsig bed.temp.set		float
newsig bed.temp.meas		float
newsig fan.speed.set		float

newsig e0.temp.range.pos_error	float
newsig e0.temp.range.neg_error	float
newsig e0.temp.range.max	float
newsig e0.temp.range.min	float
newsig e0.temp.in-range		bit
newsig e0.temp.pwm		float
newsig e0.temp.pwm.max		float
newsig e0.temp.limit.min	float
newsig e0.temp.limit.max	float
newsig e0.temp.standby		float
newsig e0.temp.in-limit		bit
newsig e0.therm-ok		bit
newsig e0.no-error		bit
newsig e0.error			bit
newsig e0.active 		bit

net e0.temp.meas 	<= Therm.ch-04.value


# PID EXTRUDER

sets e0.temp.set 0
net emcmot.00.enable		=> pid.0.enable
net e0.temp.meas		=> pid.0.feedback
net e0.temp.set			=> pid.0.command


net e0.heater			<= pid.0.output

net e0.heater			=> limit1.0.in

net e0.heaterl			<= limit1.0.out
net e0.heaterl			=> hpg.pwmgen.00.out.01.value


# Limit heater PWM to positive values
# PWM mimics hm2 implementation, which generates output for negative values
setp limit1.0.min 0.0
setp limit1.0.max 1.0

# Temperature checking
net e0.temp.set              	=> sum2.e0-temp-range-pos.in0
net e0.temp.range.pos_error  	=> sum2.e0-temp-range-pos.in1
net e0.temp.set              	=> sum2.e0-temp-range-neg.in0
net e0.temp.range.neg_error  	=> sum2.e0-temp-range-neg.in1

net e0.temp.range.min sum2.e0-temp-range-neg.out => wcomp.e0-temp-range.min
net e0.temp.range.max sum2.e0-temp-range-pos.out => wcomp.e0-temp-range.max
net e0.temp.meas              	=> wcomp.e0-temp-range.in
#the output of wcomp.e0-temp-range will say if measured temperature is in range of set value
#this needs to be coupled to a digital input for M66 readout
net e0.temp.in-range          	<= wcomp.e0-temp-range.out

# limit the output temperature to prevent damage when thermistor is broken/removed
net e0.temp.limit.min         	=> wcomp.e0-temp-limit.min
net e0.temp.limit.max        	=> wcomp.e0-temp-limit.max
net e0.temp.meas              	=> wcomp.e0-temp-limit.in
net e0.temp.in-limit          	<= wcomp.e0-temp-limit.out

setp comp.e0-active.in0 0.0001
setp comp.e0-active.hyst 0.0
net e0.heaterl => comp.e0-active.in1
net e0.active  <= comp.e0-active.out

# PID parameters (Extruder)
setp pid.0.Pgain  		0.30

setp pid.0.Igain		0.00001

setp pid.0.Dgain		0.9375

setp pid.0.maxerrorI		1.0

setp pid.0.bias			0.5


# Parameters
sets e0.temp.limit.min         0
sets e0.temp.limit.max         295
sets e0.temp.standby           60

# Fan compensation
net f0.pwm => scale.e0-fan-comp.in
net e0.pid.bias pid.0.bias <= scale.e0-fan-comp.out
setp scale.e0-fan-comp.gain 1



# ##################################################

# BED PWM and Temperature Signals

# ##################################################
newsig hbp.temp.set		float
newsig hbp.temp.meas		float
newsig hbp.temp.range.pos_error	float
newsig hbp.temp.range.neg_error	float
newsig hbp.temp.range.max	float
newsig hbp.temp.range.min	float
newsig hbp.temp.in-range	bit
newsig hbp.temp.pwm		float
newsig hbp.temp.pwm.max		float
newsig hbp.temp.limit.min	float
newsig hbp.temp.limit.max	float
newsig hbp.temp.standby		float
newsig hbp.temp.in-limit	bit
newsig hbp.therm-ok		bit
newsig hbp.no-error		bit
newsig hbp.error		bit
newsig hbp.active		bit

net hbp.temp.meas   <= Therm.ch-05.value
#setp pid.1.Pgain 1

# PID BED
net emcmot.00.enable => pid.1.enable
net hbp.temp.meas    => pid.1.feedback
net hbp.temp.set     => pid.1.command
net hbp.heater       <= pid.1.output
net hbp.heater       => limit1.1.in
net hbp.heaterl      <= limit1.1.out

# Limit heater PWM to positive values
# PWM mimics hm2 implementation, which generates output for negative values
setp limit1.1.min 0
setp limit1.1.max 1

# Temperature checking
net hbp.temp.set              => sum2.hbp-temp-range-pos.in0
net hbp.temp.range.pos_error  => sum2.hbp-temp-range-pos.in1
net hbp.temp.set              => sum2.hbp-temp-range-neg.in0
net hbp.temp.range.neg_error  => sum2.hbp-temp-range-neg.in1

net hbp.temp.range.min sum2.hbp-temp-range-neg.out => wcomp.hbp-temp-range.min
net hbp.temp.range.max sum2.hbp-temp-range-pos.out => wcomp.hbp-temp-range.max
net hbp.temp.meas                 => wcomp.hbp-temp-range.in
#the output of wcomp.e0-temp-range will say if measured temperature is in range of set value
#this needs to be coupled to a digital input for M66 readout
net hbp.temp.in-range <= wcomp.hbp-temp-range.out

# limit the output temperature to prevent damage when thermistor is broken/removed
net hbp.temp.limit.min         => wcomp.hbp-temp-limit.min
net hbp.temp.limit.max         => wcomp.hbp-temp-limit.max
net hbp.temp.meas              => wcomp.hbp-temp-limit.in
net hbp.temp.in-limit          <= wcomp.hbp-temp-limit.out

net hbp.heaterl => comp.hbp-active.in1
net hbp.active  <= comp.hbp-active.out

# PID parameters
setp pid.1.Pgain		1
setp pid.1.Igain		0.0
setp pid.1.Dgain		0.0
setp pid.1.maxerrorI		1.0
setp pid.1.bias			0.5

# Parameters
sets hbp.temp.limit.min		0
sets hbp.temp.limit.max		120
sets hbp.temp.standby		40

# ##################################################
# Fans
# ##################################################

# F0
# ---------------------------
newsig f0.set			float

# ---------------------------
setp scale.f0.gain		0.00392156862745
net f0.set			=> scale.f0.in
net f0.pwm 			<= scale.f0.out

# F1
# ---------------------------
newsig f1.set			float
newsig f1.pwm			float
# ---------------------------
setp scale.f1.gain		0.00392156862745
net f1.set			=> scale.f1.in
net f1.pwm			<= scale.f1.out

# Hotend Part Fan
# --------------------------
newsig exp0.fan.pwm		float
newsig exp0.fan.enable		bit
# --------------------------
setp mux2.exp0-pwm.in0 		0.0
setp mux2.exp0-pwm.in1		1.0
setp comp.exp0-temp.in0		50.0
setp comp.exp0-temp.hyst	2.0
net e0.temp.meas		=> comp.exp0-temp.in1
net exp0.fan.pwm		<= mux2.exp0-pwm.out
net exp0.fan.enable		<= comp.exp0-temp.out
net exp0.fan.enable		=> mux2.exp0-pwm.sel


setp hpg.pwmgen.00.pwm_period 	10000000



# Bed Heater FET 1

setp hpg.pwmgen.00.out.00.pin 		811

setp hpg.pwmgen.00.out.00.enable 	1

setp hpg.pwmgen.00.out.00.value 	0.0
net hbp.heaterl 	=> hpg.pwmgen.00.out.00.value



# E0 Heater FET 2

setp hpg.pwmgen.00.out.01.pin 		915

setp hpg.pwmgen.00.out.01.enable 	1

#setp hpg.pwmgen.00.out.01.value 	0.0
net e0.heaterl		=> hpg.pwmgen.00.out.01.value



# E1 Heater FET 3

setp hpg.pwmgen.00.out.02.pin 		927

setp hpg.pwmgen.00.out.02.enable 	1

setp hpg.pwmgen.00.out.02.value 	0.0



# E2 Heater FET 4

setp hpg.pwmgen.00.out.03.pin 		921

setp hpg.pwmgen.00.out.03.enable 	1

setp hpg.pwmgen.00.out.03.value 	0.0



# FET 5 - Fan / LED (Part Cooling)

setp hpg.pwmgen.00.out.04.pin 		941

setp hpg.pwmgen.00.out.04.enable 	1

#setp hpg.pwmgen.00.out.04.value 	0
net f0.pwm 		=> hpg.pwmgen.00.out.04.value



# FET 6 - Fan / LED (Part Lighting)
setp hpg.pwmgen.00.out.05.pin 		922
setp hpg.pwmgen.00.out.05.enable 	1

#setp hpg.pwmgen.00.out.05.value 	0
net f1.pwm		=> hpg.pwmgen.00.out.05.value

# PID for Extruder 0 temperature control
net e0.temp.meas	<= Therm.ch-04.value
net e0.temp.meas	=> pid.0.feedback

sets e0.temp.set  			0
#net e0.temp.set		=> pid.0.command

# Limit heater PWM to positive values
# PWM mimics hm2 implementation, which generates output for negative values
setp limit1.0.min 			0
# PID for Bed temperature control
#net bed.temp.meas 	<= Therm.ch-05.value
#net bed.temp.meas 	=> pid.1.feedback

sets bed.temp.set 			0
sets hbp.temp.set                       0
#net hbp.temp.set 	=> pid.1.command

#net bed.heater 	<= pid.1.output
#net bed.heater 	=> limit1.1.in
#net bed.heaterl 	<= limit1.1.out
#net bed.heaterl 	=> hpg.pwmgen.00.out.00.value

# Limit heater PWM to positive values
# PWM mimics hm2 implementation, which generates output for negative values
setp limit1.1.min 			0



# PID Parameters for adjusting temperature control

# Extruder
#setp pid.0.FF0      			0
#setp pid.0.FF1      			0
#setp pid.0.FF2      			0
#setp pid.0.Pgain  			0.30
#setp pid.0.Igain  			0.00001
#setp pid.0.Dgain  			0.9375
#setp pid.0.maxerrorI 			1.0
#setp pid.0.bias    			0.5  
#setp pid.0.enable   			1

# Bed
#setp pid.1.Pgain  			1
#setp pid.1.Igain  			0.0
#setp pid.1.Dgain  			0.0
#setp pid.1.maxerrorI 			1.0
#setp pid.1.bias    			0.5
#setp pid.1.enable   			1


# ##################################################
# UI linking
# ##################################################

net e0.temp.meas        => fdm-e0.temp.meas
net e0.temp.set        <=> fdm-e0.temp.set
net e0.temp.standby     => fdm-e0.temp.standby
net e0.temp.limit.min   => fdm-e0.temp.limit.min
net e0.temp.limit.max   => fdm-e0.temp.limit.max
net e0.temp.in-range    => fdm-e0.temp.in-range
net e0.error            => fdm-e0.error
net e0.active           => fdm-e0.active

net hbp.temp.meas       => fdm-hbp.temp.meas
net hbp.temp.set       <=> fdm-hbp.temp.set
net hbp.temp.standby    => fdm-hbp.temp.standby
net hbp.temp.limit.min  => fdm-hbp.temp.limit.min
net hbp.temp.limit.max  => fdm-hbp.temp.limit.max
net hbp.temp.in-range   => fdm-hbp.temp.in-range
net hbp.error           => fdm-hbp.error
net hbp.active          => fdm-hbp.active

net f0.set             <=> fdm-f0.set
net f1.set             <=> fdm-f1.set


# Start haltalk server
loadusr -W haltalk
